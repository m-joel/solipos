//    SOLiPOS  - Touch Friendly Point Of Sale
//    Copyright (c) 2009-2025 SOLiPOS & previous Openbravo POS works
//    https://solipos.ch
//
//    This file is part of SOLiPOS
//
//    SOLiPOS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//   SOLiPOS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with SOLiPOS.  If not, see <http://www.gnu.org/licenses/>.

package com.unicenta.pos.printer.screen;

import com.unicenta.pos.forms.AppLocal;
import com.unicenta.pos.printer.DeviceDisplay;
import com.unicenta.pos.printer.DeviceDisplayAdvance;
import com.unicenta.pos.sales.JTicketLines;
import java.awt.Graphics2D;
import java.io.IOException;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import java.awt.*;

/**
 *
 * @author adrian
 */
public class DeviceDisplayWindow extends javax.swing.JFrame implements DeviceDisplay, DeviceDisplayAdvance {

    private final String m_sName;
    private final DeviceDisplayPanel m_display;
    private int m_secScreenWidth;
    private int m_secScreenHeight;
    private boolean m_bDuel;

    /** Creates new form DeviceDisplayWindow */
    public DeviceDisplayWindow() {
        initComponents();

        m_sName = AppLocal.getIntString("display.window");
        m_display = new DeviceDisplayPanel(3.0);

        m_jContainer.add(m_display.getDisplayComponent());
        try {
            this.setIconImage(
                    ImageIO.read(DeviceDisplayWindow.class.getResourceAsStream("/com/unicenta/images/favicon.png")));
        } catch (IOException e) {
        }

        setVisible(true);
    }

    /**
     *
     * @return
     */
    @Override
    public String getDisplayName() {
        return m_sName;
    }

    /**
     *
     * @return
     */
    @Override
    public String getDisplayDescription() {
        return null;
    }

    /**
     *
     * @return
     */
    @Override
    public JComponent getDisplayComponent() {
        return null;
    }

    /**
     *
     * @param animation
     * @param sLine1
     * @param sLine2
     */
    @Override
    public void writeVisor(int animation, String sLine1, String sLine2) {
        m_display.writeVisor(animation, sLine1, sLine2);
    }

    /**
     *
     * @param sLine1
     * @param sLine2
     */
    @Override
    public void writeVisor(String sLine1, String sLine2) {
        m_display.writeVisor(sLine1, sLine2);
    }

    /**
     *
     */
    @Override
    public void clearVisor() {
        m_display.clearVisor();
    }

    @Override
    public boolean hasFeature(int feature) {
        // for support of product_image only
        // return(((DeviceDisplayAdvance.PRODUCT_IMAGE) & feature)>0);

        // for support of product image and ticketlines list
        return (((DeviceDisplayAdvance.TICKETLINES) & feature) > 0);
    }

    @Override
    public boolean setTicketLines(JTicketLines ticketlinesPanel) {
        if (m_bDuel)
            setSize(m_secScreenWidth, m_secScreenHeight);
        else
            setSize(967, 657);
        m_jListContainer.setSize(700, 500);
        m_jListContainer.add(ticketlinesPanel, java.awt.BorderLayout.CENTER);
        return true;
    }

    private static BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_jContainer = new javax.swing.JPanel();
        m_jListContainer = new javax.swing.JPanel();

        setTitle(AppLocal.getIntString("display.window")); // NOI18N

        m_jContainer.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        m_jContainer.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        m_jContainer.setPreferredSize(new java.awt.Dimension(400, 445));
        m_jContainer.setLayout(new java.awt.BorderLayout());
        m_jContainer.add(m_jListContainer, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(m_jContainer, java.awt.BorderLayout.CENTER);

        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] screens = ge.getScreenDevices();

        if (screens.length < 2) {
            m_bDuel = false;
            setSize(new java.awt.Dimension(767, 245));
            JOptionPane.showMessageDialog(null, "Second screen not detected!");
            return;
        }

        m_bDuel = true;

        // Get the second screen
        GraphicsDevice secondScreen = screens[1];
        DisplayMode dm = secondScreen.getDisplayMode();
        int screenWidth = dm.getWidth();
        int screenHeight = dm.getHeight();

        m_secScreenHeight = screenHeight;
        m_secScreenWidth = screenWidth;

        // Get the screen bounds
        GraphicsConfiguration gc = secondScreen.getDefaultConfiguration();
        Rectangle bounds = gc.getBounds();

        // Create a frame for the second screen
        setUndecorated(true); // Fullscreen without borders

        setSize(screenWidth, screenHeight);
        setLocation(bounds.x, bounds.y);
        setVisible(true);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel m_jContainer;
    private javax.swing.JPanel m_jListContainer;
    // End of variables declaration//GEN-END:variables

}
